{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "12ccf886-ca57-497d-9c75-27bdc3fb0dbc",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6232e039-e718-43ab-a439-5e320cd67d29",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ccomune</th>\n",
       "      <th>cprovincia</th>\n",
       "      <th>cregione</th>\n",
       "      <th>cnome</th>\n",
       "      <th>canno_inserimento</th>\n",
       "      <th>cdata_e_ora_inserimento</th>\n",
       "      <th>cidentificatore_in_openstreetmap</th>\n",
       "      <th>clongitudine</th>\n",
       "      <th>clatitudine</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ALTRO</td>\n",
       "      <td>ALTRO</td>\n",
       "      <td>ALTRO</td>\n",
       "      <td></td>\n",
       "      <td>2011</td>\n",
       "      <td>2011-06-25T23:17:43Z</td>\n",
       "      <td>1339088150</td>\n",
       "      <td>13.733257</td>\n",
       "      <td>45.575830</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ALTRO</td>\n",
       "      <td>ALTRO</td>\n",
       "      <td>ALTRO</td>\n",
       "      <td>Lenny's Pub</td>\n",
       "      <td>2011</td>\n",
       "      <td>2011-07-29T17:22:56Z</td>\n",
       "      <td>1375887295</td>\n",
       "      <td>12.418681</td>\n",
       "      <td>46.747584</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ALTRO</td>\n",
       "      <td>ALTRO</td>\n",
       "      <td>ALTRO</td>\n",
       "      <td>Murrayfield Pub</td>\n",
       "      <td>2015</td>\n",
       "      <td>2015-10-24T09:28:06Z</td>\n",
       "      <td>3323888102</td>\n",
       "      <td>9.029585</td>\n",
       "      <td>45.831340</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ALTRO</td>\n",
       "      <td>ALTRO</td>\n",
       "      <td>ALTRO</td>\n",
       "      <td>Snop?e</td>\n",
       "      <td>2010</td>\n",
       "      <td>2010-09-22T08:32:52Z</td>\n",
       "      <td>921157802</td>\n",
       "      <td>13.640939</td>\n",
       "      <td>45.954607</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Ala di Stura</td>\n",
       "      <td>TORINO</td>\n",
       "      <td>Piemonte</td>\n",
       "      <td></td>\n",
       "      <td>2012</td>\n",
       "      <td>2012-05-21T14:28:45Z</td>\n",
       "      <td>1760949034</td>\n",
       "      <td>7.307306</td>\n",
       "      <td>45.313150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2492</th>\n",
       "      <td>Barletta (BT)</td>\n",
       "      <td>BARLETTA ANDRIA TRANI</td>\n",
       "      <td>Puglia</td>\n",
       "      <td>Santa Croce</td>\n",
       "      <td>2010</td>\n",
       "      <td>2010-01-17T16:15:08Z</td>\n",
       "      <td>615632993</td>\n",
       "      <td>16.285782</td>\n",
       "      <td>41.320671</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2493</th>\n",
       "      <td>Bisceglie (BT)</td>\n",
       "      <td>BARLETTA ANDRIA TRANI</td>\n",
       "      <td>Puglia</td>\n",
       "      <td>Auld Dublin</td>\n",
       "      <td>2014</td>\n",
       "      <td>2014-03-03T20:56:16Z</td>\n",
       "      <td>2613737619</td>\n",
       "      <td>16.497204</td>\n",
       "      <td>41.241814</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2494</th>\n",
       "      <td>Bisceglie (BT)</td>\n",
       "      <td>BARLETTA ANDRIA TRANI</td>\n",
       "      <td>Puglia</td>\n",
       "      <td>Ferus</td>\n",
       "      <td>2014</td>\n",
       "      <td>2014-01-07T19:22:18Z</td>\n",
       "      <td>2613737620</td>\n",
       "      <td>16.506175</td>\n",
       "      <td>41.240957</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2495</th>\n",
       "      <td>Trani (BT)</td>\n",
       "      <td>BARLETTA ANDRIA TRANI</td>\n",
       "      <td>Puglia</td>\n",
       "      <td>Re Artù</td>\n",
       "      <td>2009</td>\n",
       "      <td>2009-09-04T07:57:05Z</td>\n",
       "      <td>482836935</td>\n",
       "      <td>16.418124</td>\n",
       "      <td>41.281518</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2496</th>\n",
       "      <td>Trani (BT)</td>\n",
       "      <td>BARLETTA ANDRIA TRANI</td>\n",
       "      <td>Puglia</td>\n",
       "      <td>Well's Fargo</td>\n",
       "      <td>2009</td>\n",
       "      <td>2009-08-10T12:44:03Z</td>\n",
       "      <td>387223648</td>\n",
       "      <td>16.436765</td>\n",
       "      <td>41.267264</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2497 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             ccomune             cprovincia  cregione            cnome  \\\n",
       "0              ALTRO                  ALTRO     ALTRO                    \n",
       "1              ALTRO                  ALTRO     ALTRO      Lenny's Pub   \n",
       "2              ALTRO                  ALTRO     ALTRO  Murrayfield Pub   \n",
       "3              ALTRO                  ALTRO     ALTRO           Snop?e   \n",
       "4       Ala di Stura                 TORINO  Piemonte                    \n",
       "...              ...                    ...       ...              ...   \n",
       "2492   Barletta (BT)  BARLETTA ANDRIA TRANI    Puglia      Santa Croce   \n",
       "2493  Bisceglie (BT)  BARLETTA ANDRIA TRANI    Puglia      Auld Dublin   \n",
       "2494  Bisceglie (BT)  BARLETTA ANDRIA TRANI    Puglia            Ferus   \n",
       "2495      Trani (BT)  BARLETTA ANDRIA TRANI    Puglia          Re Artù   \n",
       "2496      Trani (BT)  BARLETTA ANDRIA TRANI    Puglia     Well's Fargo   \n",
       "\n",
       "      canno_inserimento cdata_e_ora_inserimento  \\\n",
       "0                  2011    2011-06-25T23:17:43Z   \n",
       "1                  2011    2011-07-29T17:22:56Z   \n",
       "2                  2015    2015-10-24T09:28:06Z   \n",
       "3                  2010    2010-09-22T08:32:52Z   \n",
       "4                  2012    2012-05-21T14:28:45Z   \n",
       "...                 ...                     ...   \n",
       "2492               2010    2010-01-17T16:15:08Z   \n",
       "2493               2014    2014-03-03T20:56:16Z   \n",
       "2494               2014    2014-01-07T19:22:18Z   \n",
       "2495               2009    2009-09-04T07:57:05Z   \n",
       "2496               2009    2009-08-10T12:44:03Z   \n",
       "\n",
       "      cidentificatore_in_openstreetmap  clongitudine  clatitudine  \n",
       "0                           1339088150     13.733257    45.575830  \n",
       "1                           1375887295     12.418681    46.747584  \n",
       "2                           3323888102      9.029585    45.831340  \n",
       "3                            921157802     13.640939    45.954607  \n",
       "4                           1760949034      7.307306    45.313150  \n",
       "...                                ...           ...          ...  \n",
       "2492                         615632993     16.285782    41.320671  \n",
       "2493                        2613737619     16.497204    41.241814  \n",
       "2494                        2613737620     16.506175    41.240957  \n",
       "2495                         482836935     16.418124    41.281518  \n",
       "2496                         387223648     16.436765    41.267264  \n",
       "\n",
       "[2497 rows x 9 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "file_path = \"../Downloads/Mappa-dei-pub-circoli-locali-in-Italia (1).json\"\n",
    "df = pd.read_json(file_path, encoding='latin1')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a4538808-5afc-4fb9-9505-b07b3fa06b58",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>canno_inserimento</th>\n",
       "      <th>cidentificatore_in_openstreetmap</th>\n",
       "      <th>clongitudine</th>\n",
       "      <th>clatitudine</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2497.000000</td>\n",
       "      <td>2.497000e+03</td>\n",
       "      <td>2497.000000</td>\n",
       "      <td>2497.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2012.816179</td>\n",
       "      <td>1.847805e+09</td>\n",
       "      <td>11.412889</td>\n",
       "      <td>44.106531</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.915547</td>\n",
       "      <td>1.057789e+09</td>\n",
       "      <td>2.381334</td>\n",
       "      <td>2.108361</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2007.000000</td>\n",
       "      <td>3.203094e+07</td>\n",
       "      <td>6.708958</td>\n",
       "      <td>36.680786</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2012.000000</td>\n",
       "      <td>9.195678e+08</td>\n",
       "      <td>9.214541</td>\n",
       "      <td>42.885316</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2013.000000</td>\n",
       "      <td>1.769765e+09</td>\n",
       "      <td>11.301761</td>\n",
       "      <td>45.049664</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2014.000000</td>\n",
       "      <td>2.616963e+09</td>\n",
       "      <td>12.682012</td>\n",
       "      <td>45.617151</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2016.000000</td>\n",
       "      <td>4.012443e+09</td>\n",
       "      <td>18.444577</td>\n",
       "      <td>46.983781</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       canno_inserimento  cidentificatore_in_openstreetmap  clongitudine  \\\n",
       "count        2497.000000                      2.497000e+03   2497.000000   \n",
       "mean         2012.816179                      1.847805e+09     11.412889   \n",
       "std             1.915547                      1.057789e+09      2.381334   \n",
       "min          2007.000000                      3.203094e+07      6.708958   \n",
       "25%          2012.000000                      9.195678e+08      9.214541   \n",
       "50%          2013.000000                      1.769765e+09     11.301761   \n",
       "75%          2014.000000                      2.616963e+09     12.682012   \n",
       "max          2016.000000                      4.012443e+09     18.444577   \n",
       "\n",
       "       clatitudine  \n",
       "count  2497.000000  \n",
       "mean     44.106531  \n",
       "std       2.108361  \n",
       "min      36.680786  \n",
       "25%      42.885316  \n",
       "50%      45.049664  \n",
       "75%      45.617151  \n",
       "max      46.983781  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0c9d1cb9-7b38-4799-bc85-459c733e4b7a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2497 entries, 0 to 2496\n",
      "Data columns (total 9 columns):\n",
      " #   Column                            Non-Null Count  Dtype  \n",
      "---  ------                            --------------  -----  \n",
      " 0   ccomune                           2497 non-null   object \n",
      " 1   cprovincia                        2497 non-null   object \n",
      " 2   cregione                          2497 non-null   object \n",
      " 3   cnome                             2497 non-null   object \n",
      " 4   canno_inserimento                 2497 non-null   int64  \n",
      " 5   cdata_e_ora_inserimento           2497 non-null   object \n",
      " 6   cidentificatore_in_openstreetmap  2497 non-null   int64  \n",
      " 7   clongitudine                      2497 non-null   float64\n",
      " 8   clatitudine                       2497 non-null   float64\n",
      "dtypes: float64(2), int64(2), object(5)\n",
      "memory usage: 175.7+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "044ba2b8-f309-4284-867d-403b9b694543",
   "metadata": {},
   "outputs": [],
   "source": [
    "#metadati"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "89800d62-acf8-4b45-a1ed-1e730547068c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ccomune                              object\n",
       "cprovincia                           object\n",
       "cregione                             object\n",
       "cnome                                object\n",
       "canno_inserimento                     int64\n",
       "cdata_e_ora_inserimento              object\n",
       "cidentificatore_in_openstreetmap      int64\n",
       "clongitudine                        float64\n",
       "clatitudine                         float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "51e4542e-b5b6-42c5-a58e-ca6574fa646e",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.rename(columns={'ccomune': 'comune'}, inplace=True)\n",
    "df.rename(columns={'ccprovincia': 'provincia'}, inplace=True)\n",
    "df.rename(columns={'cregione ': 'regione '}, inplace=True)\n",
    "df.rename(columns={'cnome ': 'nome '}, inplace=True)\n",
    "df.rename(columns={'canno_inserimento': 'anno_inserimento'}, inplace=True)\n",
    "df.rename(columns={'cdata_e_ora_inserimento': 'data_e_ora_inserimento'}, inplace=True)\n",
    "df.rename(columns={'cidentificatore_in_openstreetmap ': 'identificatore_in_openstreetmap '}, inplace=True)\n",
    "df.rename(columns={'clongitudine ': 'longitudine '}, inplace=True)\n",
    "df.rename(columns={'clatitudine': 'latitudine'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "788e00f9-e88e-433d-b684-37a59dbdf5e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.columns = [col.lstrip(\"c\") for col in df.columns]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "524a1834-6e4b-435f-9a44-72f466944f75",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.rename(columns={'comune':'comune'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "f9e292a2-17bf-49f1-928d-06e0b69595e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "omune                               object\n",
       "provincia                           object\n",
       "regione                             object\n",
       "nome                                object\n",
       "anno_inserimento                     int64\n",
       "data_e_ora_inserimento              object\n",
       "identificatore_in_openstreetmap      int64\n",
       "longitudine                        float64\n",
       "latitudine                         float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "550c3a95-4d2e-4d87-a416-6c3d891b2468",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "omune                                             ALTRO\n",
       "provincia                                         ALTRO\n",
       "regione                                           ALTRO\n",
       "nome                                                   \n",
       "anno_inserimento                                   2011\n",
       "data_e_ora_inserimento             2011-06-25T23:17:43Z\n",
       "identificatore_in_openstreetmap              1339088150\n",
       "longitudine                                   13.733257\n",
       "latitudine                                     45.57583\n",
       "Name: 0, dtype: object"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.iloc[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "45fb6b39-c53e-4fd8-8be9-67ba41c0add5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "omune                                         Trani (BT)\n",
       "provincia                          BARLETTA ANDRIA TRANI\n",
       "regione                                           Puglia\n",
       "nome                                        Well's Fargo\n",
       "anno_inserimento                                    2009\n",
       "data_e_ora_inserimento              2009-08-10T12:44:03Z\n",
       "identificatore_in_openstreetmap                387223648\n",
       "longitudine                                    16.436765\n",
       "latitudine                                     41.267264\n",
       "Name: 2496, dtype: object"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.iloc[-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "1b2ff656-99dd-498b-8484-ddb78ea3078b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>omune</th>\n",
       "      <th>provincia</th>\n",
       "      <th>regione</th>\n",
       "      <th>nome</th>\n",
       "      <th>anno_inserimento</th>\n",
       "      <th>data_e_ora_inserimento</th>\n",
       "      <th>identificatore_in_openstreetmap</th>\n",
       "      <th>longitudine</th>\n",
       "      <th>latitudine</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>866</th>\n",
       "      <td>Pieve Tesino</td>\n",
       "      <td>TRENTO</td>\n",
       "      <td>Trentino-Alto Adige</td>\n",
       "      <td></td>\n",
       "      <td>2015</td>\n",
       "      <td>2015-12-31T21:17:15Z</td>\n",
       "      <td>1656566875</td>\n",
       "      <td>11.581854</td>\n",
       "      <td>46.077892</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2485</th>\n",
       "      <td>Barletta (BT)</td>\n",
       "      <td>BARLETTA ANDRIA TRANI</td>\n",
       "      <td>Puglia</td>\n",
       "      <td>La Gioconda</td>\n",
       "      <td>2010</td>\n",
       "      <td>2010-01-17T16:15:07Z</td>\n",
       "      <td>615632971</td>\n",
       "      <td>16.282666</td>\n",
       "      <td>41.321021</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>799</th>\n",
       "      <td>Laion</td>\n",
       "      <td>BOLZANO</td>\n",
       "      <td>Trentino-Alto Adige</td>\n",
       "      <td>Zur Sonne</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012-07-30T20:12:19Z</td>\n",
       "      <td>850636739</td>\n",
       "      <td>11.564930</td>\n",
       "      <td>46.608952</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>156</th>\n",
       "      <td>Frassinello Monferrato</td>\n",
       "      <td>ALESSANDRIA</td>\n",
       "      <td>Piemonte</td>\n",
       "      <td>Vecchia Rocka</td>\n",
       "      <td>2016</td>\n",
       "      <td>2016-01-19T09:23:35Z</td>\n",
       "      <td>1593550726</td>\n",
       "      <td>8.386496</td>\n",
       "      <td>45.033049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1728</th>\n",
       "      <td>Montepulciano</td>\n",
       "      <td>SIENA</td>\n",
       "      <td>Toscana</td>\n",
       "      <td></td>\n",
       "      <td>2012</td>\n",
       "      <td>2012-09-26T09:18:22Z</td>\n",
       "      <td>1933429320</td>\n",
       "      <td>11.850851</td>\n",
       "      <td>43.135908</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       omune              provincia              regione  \\\n",
       "866             Pieve Tesino                 TRENTO  Trentino-Alto Adige   \n",
       "2485           Barletta (BT)  BARLETTA ANDRIA TRANI               Puglia   \n",
       "799                    Laion                BOLZANO  Trentino-Alto Adige   \n",
       "156   Frassinello Monferrato            ALESSANDRIA             Piemonte   \n",
       "1728           Montepulciano                  SIENA              Toscana   \n",
       "\n",
       "               nome  anno_inserimento data_e_ora_inserimento  \\\n",
       "866                              2015   2015-12-31T21:17:15Z   \n",
       "2485    La Gioconda              2010   2010-01-17T16:15:07Z   \n",
       "799       Zur Sonne              2012   2012-07-30T20:12:19Z   \n",
       "156   Vecchia Rocka              2016   2016-01-19T09:23:35Z   \n",
       "1728                             2012   2012-09-26T09:18:22Z   \n",
       "\n",
       "      identificatore_in_openstreetmap  longitudine  latitudine  \n",
       "866                        1656566875    11.581854   46.077892  \n",
       "2485                        615632971    16.282666   41.321021  \n",
       "799                         850636739    11.564930   46.608952  \n",
       "156                        1593550726     8.386496   45.033049  \n",
       "1728                       1933429320    11.850851   43.135908  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6747890-48f5-4403-b686-b3a86ab5a3d5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2011, 2015, 2010, 2012, 2014, 2016, 2013, 2008, 2009, 2007],\n",
       "      dtype=int64)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "anno_inserimento = df['anno_inserimento'].unique()\n",
    "anno_inserimento "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "e3c7d29a-4d23-473f-87e2-b0fbded531b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "attività =df[((df['longitudine']>=9) & (df['longitudine'] <= 10)) & ((df['latitudine']>=45) & (df['latitudine'] <= 46))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "3bd31932-3dc4-41f1-a899-4efc8abd8ba7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "303"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "attività.shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "51b14d54-3549-4724-ba74-9f669913111a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "a9f5ac4a-6003-4e3d-882f-b6687dded2b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>bmi</th>\n",
       "      <th>children</th>\n",
       "      <th>smoker</th>\n",
       "      <th>region</th>\n",
       "      <th>charges</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>19</td>\n",
       "      <td>female</td>\n",
       "      <td>27.900</td>\n",
       "      <td>0</td>\n",
       "      <td>yes</td>\n",
       "      <td>southwest</td>\n",
       "      <td>16884.92400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>18</td>\n",
       "      <td>male</td>\n",
       "      <td>33.770</td>\n",
       "      <td>1</td>\n",
       "      <td>no</td>\n",
       "      <td>southeast</td>\n",
       "      <td>1725.55230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>28</td>\n",
       "      <td>male</td>\n",
       "      <td>33.000</td>\n",
       "      <td>3</td>\n",
       "      <td>no</td>\n",
       "      <td>southeast</td>\n",
       "      <td>4449.46200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>33</td>\n",
       "      <td>male</td>\n",
       "      <td>22.705</td>\n",
       "      <td>0</td>\n",
       "      <td>no</td>\n",
       "      <td>northwest</td>\n",
       "      <td>21984.47061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>32</td>\n",
       "      <td>male</td>\n",
       "      <td>28.880</td>\n",
       "      <td>0</td>\n",
       "      <td>no</td>\n",
       "      <td>northwest</td>\n",
       "      <td>3866.85520</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1333</th>\n",
       "      <td>50</td>\n",
       "      <td>male</td>\n",
       "      <td>30.970</td>\n",
       "      <td>3</td>\n",
       "      <td>no</td>\n",
       "      <td>northwest</td>\n",
       "      <td>10600.54830</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1334</th>\n",
       "      <td>18</td>\n",
       "      <td>female</td>\n",
       "      <td>31.920</td>\n",
       "      <td>0</td>\n",
       "      <td>no</td>\n",
       "      <td>northeast</td>\n",
       "      <td>2205.98080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1335</th>\n",
       "      <td>18</td>\n",
       "      <td>female</td>\n",
       "      <td>36.850</td>\n",
       "      <td>0</td>\n",
       "      <td>no</td>\n",
       "      <td>southeast</td>\n",
       "      <td>1629.83350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1336</th>\n",
       "      <td>21</td>\n",
       "      <td>female</td>\n",
       "      <td>25.800</td>\n",
       "      <td>0</td>\n",
       "      <td>no</td>\n",
       "      <td>southwest</td>\n",
       "      <td>2007.94500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1337</th>\n",
       "      <td>61</td>\n",
       "      <td>female</td>\n",
       "      <td>29.070</td>\n",
       "      <td>0</td>\n",
       "      <td>yes</td>\n",
       "      <td>northwest</td>\n",
       "      <td>29141.36030</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1338 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      age     sex     bmi  children smoker     region      charges\n",
       "0      19  female  27.900         0    yes  southwest  16884.92400\n",
       "1      18    male  33.770         1     no  southeast   1725.55230\n",
       "2      28    male  33.000         3     no  southeast   4449.46200\n",
       "3      33    male  22.705         0     no  northwest  21984.47061\n",
       "4      32    male  28.880         0     no  northwest   3866.85520\n",
       "...   ...     ...     ...       ...    ...        ...          ...\n",
       "1333   50    male  30.970         3     no  northwest  10600.54830\n",
       "1334   18  female  31.920         0     no  northeast   2205.98080\n",
       "1335   18  female  36.850         0     no  southeast   1629.83350\n",
       "1336   21  female  25.800         0     no  southwest   2007.94500\n",
       "1337   61  female  29.070         0    yes  northwest  29141.36030\n",
       "\n",
       "[1338 rows x 7 columns]"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "file_path = \"../Downloads/beginner datasets 1/insurance.csv\"\n",
    "df = pd.read_csv(file_path)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "bb83ad93-e80a-4cea-bee5-1ea195d35b30",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1338, 7)"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "18e292d5-2134-405d-8f45-fcf26f44c241",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>bmi</th>\n",
       "      <th>children</th>\n",
       "      <th>smoker</th>\n",
       "      <th>region</th>\n",
       "      <th>charges</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>19</td>\n",
       "      <td>female</td>\n",
       "      <td>27.900</td>\n",
       "      <td>0</td>\n",
       "      <td>yes</td>\n",
       "      <td>southwest</td>\n",
       "      <td>16884.92400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>18</td>\n",
       "      <td>male</td>\n",
       "      <td>33.770</td>\n",
       "      <td>1</td>\n",
       "      <td>no</td>\n",
       "      <td>southeast</td>\n",
       "      <td>1725.55230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>28</td>\n",
       "      <td>male</td>\n",
       "      <td>33.000</td>\n",
       "      <td>3</td>\n",
       "      <td>no</td>\n",
       "      <td>southeast</td>\n",
       "      <td>4449.46200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>33</td>\n",
       "      <td>male</td>\n",
       "      <td>22.705</td>\n",
       "      <td>0</td>\n",
       "      <td>no</td>\n",
       "      <td>northwest</td>\n",
       "      <td>21984.47061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>32</td>\n",
       "      <td>male</td>\n",
       "      <td>28.880</td>\n",
       "      <td>0</td>\n",
       "      <td>no</td>\n",
       "      <td>northwest</td>\n",
       "      <td>3866.85520</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age     sex     bmi  children smoker     region      charges\n",
       "0   19  female  27.900         0    yes  southwest  16884.92400\n",
       "1   18    male  33.770         1     no  southeast   1725.55230\n",
       "2   28    male  33.000         3     no  southeast   4449.46200\n",
       "3   33    male  22.705         0     no  northwest  21984.47061\n",
       "4   32    male  28.880         0     no  northwest   3866.85520"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "63c91f29-133f-46c2-a1df-74d5b86658c2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'], dtype='object')"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "6bb2e87e-9688-4d11-b1d5-df08b647f420",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "region\n",
       "northeast    13406.384516\n",
       "northwest    12417.575374\n",
       "southeast    14735.411438\n",
       "southwest    12346.937377\n",
       "Name: charges, dtype: float64"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby(\"region\")[\"charges\"].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "053d974a-d265-4a86-a658-6e3986d3cc2c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "smoker\n",
       "no      8434.268298\n",
       "yes    32050.231832\n",
       "Name: charges, dtype: float64"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby(\"smoker\")[\"charges\"].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "567fe9f0-9d3a-4161-9c50-766047b077de",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "sex\n",
       "female    12569.578844\n",
       "male      13956.751178\n",
       "Name: charges, dtype: float64"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby(\"sex\")[\"charges\"].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "a7d0cd3d-5524-4607-be2c-474bc1df4a88",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bmi</th>\n",
       "      <th>15.960</th>\n",
       "      <th>16.815</th>\n",
       "      <th>17.195</th>\n",
       "      <th>17.290</th>\n",
       "      <th>17.385</th>\n",
       "      <th>17.400</th>\n",
       "      <th>17.480</th>\n",
       "      <th>17.670</th>\n",
       "      <th>17.765</th>\n",
       "      <th>17.800</th>\n",
       "      <th>...</th>\n",
       "      <th>46.750</th>\n",
       "      <th>47.410</th>\n",
       "      <th>47.520</th>\n",
       "      <th>47.600</th>\n",
       "      <th>47.740</th>\n",
       "      <th>48.070</th>\n",
       "      <th>49.060</th>\n",
       "      <th>50.380</th>\n",
       "      <th>52.580</th>\n",
       "      <th>53.130</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"8\" valign=\"top\">age</th>\n",
       "      <th>count</th>\n",
       "      <td>1.0000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>18.0000</td>\n",
       "      <td>29.500000</td>\n",
       "      <td>26.00000</td>\n",
       "      <td>27.666667</td>\n",
       "      <td>23.00000</td>\n",
       "      <td>21.000</td>\n",
       "      <td>19.0000</td>\n",
       "      <td>26.0000</td>\n",
       "      <td>32.0000</td>\n",
       "      <td>19.000</td>\n",
       "      <td>...</td>\n",
       "      <td>52.0000</td>\n",
       "      <td>54.00000</td>\n",
       "      <td>47.0000</td>\n",
       "      <td>37.000</td>\n",
       "      <td>52.0000</td>\n",
       "      <td>46.0000</td>\n",
       "      <td>58.0000</td>\n",
       "      <td>23.0000</td>\n",
       "      <td>22.0000</td>\n",
       "      <td>18.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>NaN</td>\n",
       "      <td>12.020815</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.504385</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>18.0000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>26.00000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>23.00000</td>\n",
       "      <td>21.000</td>\n",
       "      <td>19.0000</td>\n",
       "      <td>26.0000</td>\n",
       "      <td>32.0000</td>\n",
       "      <td>19.000</td>\n",
       "      <td>...</td>\n",
       "      <td>52.0000</td>\n",
       "      <td>54.00000</td>\n",
       "      <td>47.0000</td>\n",
       "      <td>37.000</td>\n",
       "      <td>52.0000</td>\n",
       "      <td>46.0000</td>\n",
       "      <td>58.0000</td>\n",
       "      <td>23.0000</td>\n",
       "      <td>22.0000</td>\n",
       "      <td>18.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>18.0000</td>\n",
       "      <td>25.250000</td>\n",
       "      <td>26.00000</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>23.00000</td>\n",
       "      <td>21.000</td>\n",
       "      <td>19.0000</td>\n",
       "      <td>26.0000</td>\n",
       "      <td>32.0000</td>\n",
       "      <td>19.000</td>\n",
       "      <td>...</td>\n",
       "      <td>52.0000</td>\n",
       "      <td>54.00000</td>\n",
       "      <td>47.0000</td>\n",
       "      <td>37.000</td>\n",
       "      <td>52.0000</td>\n",
       "      <td>46.0000</td>\n",
       "      <td>58.0000</td>\n",
       "      <td>23.0000</td>\n",
       "      <td>22.0000</td>\n",
       "      <td>18.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>18.0000</td>\n",
       "      <td>29.500000</td>\n",
       "      <td>26.00000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>23.00000</td>\n",
       "      <td>21.000</td>\n",
       "      <td>19.0000</td>\n",
       "      <td>26.0000</td>\n",
       "      <td>32.0000</td>\n",
       "      <td>19.000</td>\n",
       "      <td>...</td>\n",
       "      <td>52.0000</td>\n",
       "      <td>54.00000</td>\n",
       "      <td>47.0000</td>\n",
       "      <td>37.000</td>\n",
       "      <td>52.0000</td>\n",
       "      <td>46.0000</td>\n",
       "      <td>58.0000</td>\n",
       "      <td>23.0000</td>\n",
       "      <td>22.0000</td>\n",
       "      <td>18.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>18.0000</td>\n",
       "      <td>33.750000</td>\n",
       "      <td>26.00000</td>\n",
       "      <td>32.500000</td>\n",
       "      <td>23.00000</td>\n",
       "      <td>21.000</td>\n",
       "      <td>19.0000</td>\n",
       "      <td>26.0000</td>\n",
       "      <td>32.0000</td>\n",
       "      <td>19.000</td>\n",
       "      <td>...</td>\n",
       "      <td>52.0000</td>\n",
       "      <td>54.00000</td>\n",
       "      <td>47.0000</td>\n",
       "      <td>37.000</td>\n",
       "      <td>52.0000</td>\n",
       "      <td>46.0000</td>\n",
       "      <td>58.0000</td>\n",
       "      <td>23.0000</td>\n",
       "      <td>22.0000</td>\n",
       "      <td>18.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>18.0000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>26.00000</td>\n",
       "      <td>37.000000</td>\n",
       "      <td>23.00000</td>\n",
       "      <td>21.000</td>\n",
       "      <td>19.0000</td>\n",
       "      <td>26.0000</td>\n",
       "      <td>32.0000</td>\n",
       "      <td>19.000</td>\n",
       "      <td>...</td>\n",
       "      <td>52.0000</td>\n",
       "      <td>54.00000</td>\n",
       "      <td>47.0000</td>\n",
       "      <td>37.000</td>\n",
       "      <td>52.0000</td>\n",
       "      <td>46.0000</td>\n",
       "      <td>58.0000</td>\n",
       "      <td>23.0000</td>\n",
       "      <td>22.0000</td>\n",
       "      <td>18.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"8\" valign=\"top\">children</th>\n",
       "      <th>count</th>\n",
       "      <td>1.0000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.0000</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>2.00000</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>2.0000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>...</td>\n",
       "      <td>5.0000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>2.000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>2.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.707107</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.154701</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.0000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>2.0000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>...</td>\n",
       "      <td>5.0000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>2.000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>2.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.0000</td>\n",
       "      <td>1.250000</td>\n",
       "      <td>2.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>2.0000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>...</td>\n",
       "      <td>5.0000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>2.000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>2.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.0000</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>2.00000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>2.0000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>...</td>\n",
       "      <td>5.0000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>2.000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>2.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.0000</td>\n",
       "      <td>1.750000</td>\n",
       "      <td>2.00000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>2.0000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>...</td>\n",
       "      <td>5.0000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>2.000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>2.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>0.0000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.00000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>2.0000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>...</td>\n",
       "      <td>5.0000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>2.000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>2.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"8\" valign=\"top\">charges</th>\n",
       "      <th>count</th>\n",
       "      <td>1.0000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>1.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1694.7964</td>\n",
       "      <td>4904.000350</td>\n",
       "      <td>14455.64405</td>\n",
       "      <td>7813.353433</td>\n",
       "      <td>2775.19215</td>\n",
       "      <td>2585.269</td>\n",
       "      <td>1621.3402</td>\n",
       "      <td>2680.9493</td>\n",
       "      <td>32734.1863</td>\n",
       "      <td>1727.785</td>\n",
       "      <td>...</td>\n",
       "      <td>12592.5345</td>\n",
       "      <td>63770.42801</td>\n",
       "      <td>8083.9198</td>\n",
       "      <td>46113.511</td>\n",
       "      <td>9748.9106</td>\n",
       "      <td>9432.9253</td>\n",
       "      <td>11381.3254</td>\n",
       "      <td>2438.0552</td>\n",
       "      <td>44501.3982</td>\n",
       "      <td>1163.4627</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2455.844784</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4619.986089</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1694.7964</td>\n",
       "      <td>3167.455850</td>\n",
       "      <td>14455.64405</td>\n",
       "      <td>3732.625100</td>\n",
       "      <td>2775.19215</td>\n",
       "      <td>2585.269</td>\n",
       "      <td>1621.3402</td>\n",
       "      <td>2680.9493</td>\n",
       "      <td>32734.1863</td>\n",
       "      <td>1727.785</td>\n",
       "      <td>...</td>\n",
       "      <td>12592.5345</td>\n",
       "      <td>63770.42801</td>\n",
       "      <td>8083.9198</td>\n",
       "      <td>46113.511</td>\n",
       "      <td>9748.9106</td>\n",
       "      <td>9432.9253</td>\n",
       "      <td>11381.3254</td>\n",
       "      <td>2438.0552</td>\n",
       "      <td>44501.3982</td>\n",
       "      <td>1163.4627</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1694.7964</td>\n",
       "      <td>4035.728100</td>\n",
       "      <td>14455.64405</td>\n",
       "      <td>5305.302600</td>\n",
       "      <td>2775.19215</td>\n",
       "      <td>2585.269</td>\n",
       "      <td>1621.3402</td>\n",
       "      <td>2680.9493</td>\n",
       "      <td>32734.1863</td>\n",
       "      <td>1727.785</td>\n",
       "      <td>...</td>\n",
       "      <td>12592.5345</td>\n",
       "      <td>63770.42801</td>\n",
       "      <td>8083.9198</td>\n",
       "      <td>46113.511</td>\n",
       "      <td>9748.9106</td>\n",
       "      <td>9432.9253</td>\n",
       "      <td>11381.3254</td>\n",
       "      <td>2438.0552</td>\n",
       "      <td>44501.3982</td>\n",
       "      <td>1163.4627</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1694.7964</td>\n",
       "      <td>4904.000350</td>\n",
       "      <td>14455.64405</td>\n",
       "      <td>6877.980100</td>\n",
       "      <td>2775.19215</td>\n",
       "      <td>2585.269</td>\n",
       "      <td>1621.3402</td>\n",
       "      <td>2680.9493</td>\n",
       "      <td>32734.1863</td>\n",
       "      <td>1727.785</td>\n",
       "      <td>...</td>\n",
       "      <td>12592.5345</td>\n",
       "      <td>63770.42801</td>\n",
       "      <td>8083.9198</td>\n",
       "      <td>46113.511</td>\n",
       "      <td>9748.9106</td>\n",
       "      <td>9432.9253</td>\n",
       "      <td>11381.3254</td>\n",
       "      <td>2438.0552</td>\n",
       "      <td>44501.3982</td>\n",
       "      <td>1163.4627</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1694.7964</td>\n",
       "      <td>5772.272600</td>\n",
       "      <td>14455.64405</td>\n",
       "      <td>9853.717600</td>\n",
       "      <td>2775.19215</td>\n",
       "      <td>2585.269</td>\n",
       "      <td>1621.3402</td>\n",
       "      <td>2680.9493</td>\n",
       "      <td>32734.1863</td>\n",
       "      <td>1727.785</td>\n",
       "      <td>...</td>\n",
       "      <td>12592.5345</td>\n",
       "      <td>63770.42801</td>\n",
       "      <td>8083.9198</td>\n",
       "      <td>46113.511</td>\n",
       "      <td>9748.9106</td>\n",
       "      <td>9432.9253</td>\n",
       "      <td>11381.3254</td>\n",
       "      <td>2438.0552</td>\n",
       "      <td>44501.3982</td>\n",
       "      <td>1163.4627</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1694.7964</td>\n",
       "      <td>6640.544850</td>\n",
       "      <td>14455.64405</td>\n",
       "      <td>12829.455100</td>\n",
       "      <td>2775.19215</td>\n",
       "      <td>2585.269</td>\n",
       "      <td>1621.3402</td>\n",
       "      <td>2680.9493</td>\n",
       "      <td>32734.1863</td>\n",
       "      <td>1727.785</td>\n",
       "      <td>...</td>\n",
       "      <td>12592.5345</td>\n",
       "      <td>63770.42801</td>\n",
       "      <td>8083.9198</td>\n",
       "      <td>46113.511</td>\n",
       "      <td>9748.9106</td>\n",
       "      <td>9432.9253</td>\n",
       "      <td>11381.3254</td>\n",
       "      <td>2438.0552</td>\n",
       "      <td>44501.3982</td>\n",
       "      <td>1163.4627</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>24 rows × 548 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "bmi                15.960       16.815       17.195        17.290      17.385  \\\n",
       "age      count     1.0000     2.000000      1.00000      3.000000     1.00000   \n",
       "         mean     18.0000    29.500000     26.00000     27.666667    23.00000   \n",
       "         std          NaN    12.020815          NaN      9.504385         NaN   \n",
       "         min      18.0000    21.000000     26.00000     18.000000    23.00000   \n",
       "         25%      18.0000    25.250000     26.00000     23.000000    23.00000   \n",
       "         50%      18.0000    29.500000     26.00000     28.000000    23.00000   \n",
       "         75%      18.0000    33.750000     26.00000     32.500000    23.00000   \n",
       "         max      18.0000    38.000000     26.00000     37.000000    23.00000   \n",
       "children count     1.0000     2.000000      1.00000      3.000000     1.00000   \n",
       "         mean      0.0000     1.500000      2.00000      1.333333     1.00000   \n",
       "         std          NaN     0.707107          NaN      1.154701         NaN   \n",
       "         min       0.0000     1.000000      2.00000      0.000000     1.00000   \n",
       "         25%       0.0000     1.250000      2.00000      1.000000     1.00000   \n",
       "         50%       0.0000     1.500000      2.00000      2.000000     1.00000   \n",
       "         75%       0.0000     1.750000      2.00000      2.000000     1.00000   \n",
       "         max       0.0000     2.000000      2.00000      2.000000     1.00000   \n",
       "charges  count     1.0000     2.000000      1.00000      3.000000     1.00000   \n",
       "         mean   1694.7964  4904.000350  14455.64405   7813.353433  2775.19215   \n",
       "         std          NaN  2455.844784          NaN   4619.986089         NaN   \n",
       "         min    1694.7964  3167.455850  14455.64405   3732.625100  2775.19215   \n",
       "         25%    1694.7964  4035.728100  14455.64405   5305.302600  2775.19215   \n",
       "         50%    1694.7964  4904.000350  14455.64405   6877.980100  2775.19215   \n",
       "         75%    1694.7964  5772.272600  14455.64405   9853.717600  2775.19215   \n",
       "         max    1694.7964  6640.544850  14455.64405  12829.455100  2775.19215   \n",
       "\n",
       "bmi               17.400     17.480     17.670      17.765    17.800  ...  \\\n",
       "age      count     1.000     1.0000     1.0000      1.0000     1.000  ...   \n",
       "         mean     21.000    19.0000    26.0000     32.0000    19.000  ...   \n",
       "         std         NaN        NaN        NaN         NaN       NaN  ...   \n",
       "         min      21.000    19.0000    26.0000     32.0000    19.000  ...   \n",
       "         25%      21.000    19.0000    26.0000     32.0000    19.000  ...   \n",
       "         50%      21.000    19.0000    26.0000     32.0000    19.000  ...   \n",
       "         75%      21.000    19.0000    26.0000     32.0000    19.000  ...   \n",
       "         max      21.000    19.0000    26.0000     32.0000    19.000  ...   \n",
       "children count     1.000     1.0000     1.0000      1.0000     1.000  ...   \n",
       "         mean      1.000     0.0000     0.0000      2.0000     0.000  ...   \n",
       "         std         NaN        NaN        NaN         NaN       NaN  ...   \n",
       "         min       1.000     0.0000     0.0000      2.0000     0.000  ...   \n",
       "         25%       1.000     0.0000     0.0000      2.0000     0.000  ...   \n",
       "         50%       1.000     0.0000     0.0000      2.0000     0.000  ...   \n",
       "         75%       1.000     0.0000     0.0000      2.0000     0.000  ...   \n",
       "         max       1.000     0.0000     0.0000      2.0000     0.000  ...   \n",
       "charges  count     1.000     1.0000     1.0000      1.0000     1.000  ...   \n",
       "         mean   2585.269  1621.3402  2680.9493  32734.1863  1727.785  ...   \n",
       "         std         NaN        NaN        NaN         NaN       NaN  ...   \n",
       "         min    2585.269  1621.3402  2680.9493  32734.1863  1727.785  ...   \n",
       "         25%    2585.269  1621.3402  2680.9493  32734.1863  1727.785  ...   \n",
       "         50%    2585.269  1621.3402  2680.9493  32734.1863  1727.785  ...   \n",
       "         75%    2585.269  1621.3402  2680.9493  32734.1863  1727.785  ...   \n",
       "         max    2585.269  1621.3402  2680.9493  32734.1863  1727.785  ...   \n",
       "\n",
       "bmi                 46.750       47.410     47.520     47.600     47.740  \\\n",
       "age      count      1.0000      1.00000     1.0000      1.000     1.0000   \n",
       "         mean      52.0000     54.00000    47.0000     37.000    52.0000   \n",
       "         std           NaN          NaN        NaN        NaN        NaN   \n",
       "         min       52.0000     54.00000    47.0000     37.000    52.0000   \n",
       "         25%       52.0000     54.00000    47.0000     37.000    52.0000   \n",
       "         50%       52.0000     54.00000    47.0000     37.000    52.0000   \n",
       "         75%       52.0000     54.00000    47.0000     37.000    52.0000   \n",
       "         max       52.0000     54.00000    47.0000     37.000    52.0000   \n",
       "children count      1.0000      1.00000     1.0000      1.000     1.0000   \n",
       "         mean       5.0000      0.00000     1.0000      2.000     1.0000   \n",
       "         std           NaN          NaN        NaN        NaN        NaN   \n",
       "         min        5.0000      0.00000     1.0000      2.000     1.0000   \n",
       "         25%        5.0000      0.00000     1.0000      2.000     1.0000   \n",
       "         50%        5.0000      0.00000     1.0000      2.000     1.0000   \n",
       "         75%        5.0000      0.00000     1.0000      2.000     1.0000   \n",
       "         max        5.0000      0.00000     1.0000      2.000     1.0000   \n",
       "charges  count      1.0000      1.00000     1.0000      1.000     1.0000   \n",
       "         mean   12592.5345  63770.42801  8083.9198  46113.511  9748.9106   \n",
       "         std           NaN          NaN        NaN        NaN        NaN   \n",
       "         min    12592.5345  63770.42801  8083.9198  46113.511  9748.9106   \n",
       "         25%    12592.5345  63770.42801  8083.9198  46113.511  9748.9106   \n",
       "         50%    12592.5345  63770.42801  8083.9198  46113.511  9748.9106   \n",
       "         75%    12592.5345  63770.42801  8083.9198  46113.511  9748.9106   \n",
       "         max    12592.5345  63770.42801  8083.9198  46113.511  9748.9106   \n",
       "\n",
       "bmi                48.070      49.060     50.380      52.580     53.130  \n",
       "age      count     1.0000      1.0000     1.0000      1.0000     1.0000  \n",
       "         mean     46.0000     58.0000    23.0000     22.0000    18.0000  \n",
       "         std          NaN         NaN        NaN         NaN        NaN  \n",
       "         min      46.0000     58.0000    23.0000     22.0000    18.0000  \n",
       "         25%      46.0000     58.0000    23.0000     22.0000    18.0000  \n",
       "         50%      46.0000     58.0000    23.0000     22.0000    18.0000  \n",
       "         75%      46.0000     58.0000    23.0000     22.0000    18.0000  \n",
       "         max      46.0000     58.0000    23.0000     22.0000    18.0000  \n",
       "children count     1.0000      1.0000     1.0000      1.0000     1.0000  \n",
       "         mean      2.0000      0.0000     1.0000      1.0000     0.0000  \n",
       "         std          NaN         NaN        NaN         NaN        NaN  \n",
       "         min       2.0000      0.0000     1.0000      1.0000     0.0000  \n",
       "         25%       2.0000      0.0000     1.0000      1.0000     0.0000  \n",
       "         50%       2.0000      0.0000     1.0000      1.0000     0.0000  \n",
       "         75%       2.0000      0.0000     1.0000      1.0000     0.0000  \n",
       "         max       2.0000      0.0000     1.0000      1.0000     0.0000  \n",
       "charges  count     1.0000      1.0000     1.0000      1.0000     1.0000  \n",
       "         mean   9432.9253  11381.3254  2438.0552  44501.3982  1163.4627  \n",
       "         std          NaN         NaN        NaN         NaN        NaN  \n",
       "         min    9432.9253  11381.3254  2438.0552  44501.3982  1163.4627  \n",
       "         25%    9432.9253  11381.3254  2438.0552  44501.3982  1163.4627  \n",
       "         50%    9432.9253  11381.3254  2438.0552  44501.3982  1163.4627  \n",
       "         75%    9432.9253  11381.3254  2438.0552  44501.3982  1163.4627  \n",
       "         max    9432.9253  11381.3254  2438.0552  44501.3982  1163.4627  \n",
       "\n",
       "[24 rows x 548 columns]"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby(\"bmi\").describe().transpose()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "d79db095-42b6-428a-b401-63a1a56125c6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal_length</th>\n",
       "      <th>sepal_width</th>\n",
       "      <th>petal_length</th>\n",
       "      <th>petal_width</th>\n",
       "      <th>species</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>6.7</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.3</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>6.3</td>\n",
       "      <td>2.5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.9</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>6.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>6.2</td>\n",
       "      <td>3.4</td>\n",
       "      <td>5.4</td>\n",
       "      <td>2.3</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>5.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.1</td>\n",
       "      <td>1.8</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>150 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     sepal_length  sepal_width  petal_length  petal_width         species\n",
       "0             5.1          3.5           1.4          0.2     Iris-setosa\n",
       "1             4.9          3.0           1.4          0.2     Iris-setosa\n",
       "2             4.7          3.2           1.3          0.2     Iris-setosa\n",
       "3             4.6          3.1           1.5          0.2     Iris-setosa\n",
       "4             5.0          3.6           1.4          0.2     Iris-setosa\n",
       "..            ...          ...           ...          ...             ...\n",
       "145           6.7          3.0           5.2          2.3  Iris-virginica\n",
       "146           6.3          2.5           5.0          1.9  Iris-virginica\n",
       "147           6.5          3.0           5.2          2.0  Iris-virginica\n",
       "148           6.2          3.4           5.4          2.3  Iris-virginica\n",
       "149           5.9          3.0           5.1          1.8  Iris-virginica\n",
       "\n",
       "[150 rows x 5 columns]"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "file_path = \"../Downloads/beginner datasets 2/iris.csv\"\n",
    "df = pd.read_csv(file_path)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "6a0b2c09-41df-48eb-a731-021c73d909a1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.758666666666666"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.petal_length.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "6002200b-4d91-4357-8c01-f019e99f81d2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "species\n",
       "Iris-setosa        1.464\n",
       "Iris-versicolor    4.260\n",
       "Iris-virginica     5.552\n",
       "Name: petal_length, dtype: float64"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby(\"species\")[\"petal_length\"].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "9ee1a613-e961-4cbf-bea5-84c7747aec32",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "species\n",
       "Iris-setosa        0.244\n",
       "Iris-versicolor    1.326\n",
       "Iris-virginica     2.026\n",
       "Name: petal_width, dtype: float64"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby(\"species\")[\"petal_width\"].agg(\"mean\",\"max\",\"min\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "52946e1e-39ac-47ab-b443-42766aa1e4dd",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "f2ff4e02-37d1-491e-9a32-9df751da6d78",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fixed acidity</th>\n",
       "      <th>volatile acidity</th>\n",
       "      <th>citric acid</th>\n",
       "      <th>residual sugar</th>\n",
       "      <th>chlorides</th>\n",
       "      <th>free sulfur dioxide</th>\n",
       "      <th>total sulfur dioxide</th>\n",
       "      <th>density</th>\n",
       "      <th>pH</th>\n",
       "      <th>sulphates</th>\n",
       "      <th>alcohol</th>\n",
       "      <th>quality</th>\n",
       "      <th>type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7.4</td>\n",
       "      <td>0.70</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.076</td>\n",
       "      <td>11.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.99780</td>\n",
       "      <td>3.51</td>\n",
       "      <td>0.56</td>\n",
       "      <td>9.4</td>\n",
       "      <td>5</td>\n",
       "      <td>red</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7.8</td>\n",
       "      <td>0.88</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.6</td>\n",
       "      <td>0.098</td>\n",
       "      <td>25.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>0.99680</td>\n",
       "      <td>3.20</td>\n",
       "      <td>0.68</td>\n",
       "      <td>9.8</td>\n",
       "      <td>5</td>\n",
       "      <td>red</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7.8</td>\n",
       "      <td>0.76</td>\n",
       "      <td>0.04</td>\n",
       "      <td>2.3</td>\n",
       "      <td>0.092</td>\n",
       "      <td>15.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0.99700</td>\n",
       "      <td>3.26</td>\n",
       "      <td>0.65</td>\n",
       "      <td>9.8</td>\n",
       "      <td>5</td>\n",
       "      <td>red</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11.2</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.56</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.075</td>\n",
       "      <td>17.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>0.99800</td>\n",
       "      <td>3.16</td>\n",
       "      <td>0.58</td>\n",
       "      <td>9.8</td>\n",
       "      <td>6</td>\n",
       "      <td>red</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7.4</td>\n",
       "      <td>0.70</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.076</td>\n",
       "      <td>11.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.99780</td>\n",
       "      <td>3.51</td>\n",
       "      <td>0.56</td>\n",
       "      <td>9.4</td>\n",
       "      <td>5</td>\n",
       "      <td>red</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6492</th>\n",
       "      <td>6.2</td>\n",
       "      <td>0.21</td>\n",
       "      <td>0.29</td>\n",
       "      <td>1.6</td>\n",
       "      <td>0.039</td>\n",
       "      <td>24.0</td>\n",
       "      <td>92.0</td>\n",
       "      <td>0.99114</td>\n",
       "      <td>3.27</td>\n",
       "      <td>0.50</td>\n",
       "      <td>11.2</td>\n",
       "      <td>6</td>\n",
       "      <td>white</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6493</th>\n",
       "      <td>6.6</td>\n",
       "      <td>0.32</td>\n",
       "      <td>0.36</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.047</td>\n",
       "      <td>57.0</td>\n",
       "      <td>168.0</td>\n",
       "      <td>0.99490</td>\n",
       "      <td>3.15</td>\n",
       "      <td>0.46</td>\n",
       "      <td>9.6</td>\n",
       "      <td>5</td>\n",
       "      <td>white</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6494</th>\n",
       "      <td>6.5</td>\n",
       "      <td>0.24</td>\n",
       "      <td>0.19</td>\n",
       "      <td>1.2</td>\n",
       "      <td>0.041</td>\n",
       "      <td>30.0</td>\n",
       "      <td>111.0</td>\n",
       "      <td>0.99254</td>\n",
       "      <td>2.99</td>\n",
       "      <td>0.46</td>\n",
       "      <td>9.4</td>\n",
       "      <td>6</td>\n",
       "      <td>white</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6495</th>\n",
       "      <td>5.5</td>\n",
       "      <td>0.29</td>\n",
       "      <td>0.30</td>\n",
       "      <td>1.1</td>\n",
       "      <td>0.022</td>\n",
       "      <td>20.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>0.98869</td>\n",
       "      <td>3.34</td>\n",
       "      <td>0.38</td>\n",
       "      <td>12.8</td>\n",
       "      <td>7</td>\n",
       "      <td>white</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6496</th>\n",
       "      <td>6.0</td>\n",
       "      <td>0.21</td>\n",
       "      <td>0.38</td>\n",
       "      <td>0.8</td>\n",
       "      <td>0.020</td>\n",
       "      <td>22.0</td>\n",
       "      <td>98.0</td>\n",
       "      <td>0.98941</td>\n",
       "      <td>3.26</td>\n",
       "      <td>0.32</td>\n",
       "      <td>11.8</td>\n",
       "      <td>6</td>\n",
       "      <td>white</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6497 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
       "0               7.4              0.70         0.00             1.9      0.076   \n",
       "1               7.8              0.88         0.00             2.6      0.098   \n",
       "2               7.8              0.76         0.04             2.3      0.092   \n",
       "3              11.2              0.28         0.56             1.9      0.075   \n",
       "4               7.4              0.70         0.00             1.9      0.076   \n",
       "...             ...               ...          ...             ...        ...   \n",
       "6492            6.2              0.21         0.29             1.6      0.039   \n",
       "6493            6.6              0.32         0.36             8.0      0.047   \n",
       "6494            6.5              0.24         0.19             1.2      0.041   \n",
       "6495            5.5              0.29         0.30             1.1      0.022   \n",
       "6496            6.0              0.21         0.38             0.8      0.020   \n",
       "\n",
       "      free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n",
       "0                    11.0                  34.0  0.99780  3.51       0.56   \n",
       "1                    25.0                  67.0  0.99680  3.20       0.68   \n",
       "2                    15.0                  54.0  0.99700  3.26       0.65   \n",
       "3                    17.0                  60.0  0.99800  3.16       0.58   \n",
       "4                    11.0                  34.0  0.99780  3.51       0.56   \n",
       "...                   ...                   ...      ...   ...        ...   \n",
       "6492                 24.0                  92.0  0.99114  3.27       0.50   \n",
       "6493                 57.0                 168.0  0.99490  3.15       0.46   \n",
       "6494                 30.0                 111.0  0.99254  2.99       0.46   \n",
       "6495                 20.0                 110.0  0.98869  3.34       0.38   \n",
       "6496                 22.0                  98.0  0.98941  3.26       0.32   \n",
       "\n",
       "      alcohol  quality   type  \n",
       "0         9.4        5    red  \n",
       "1         9.8        5    red  \n",
       "2         9.8        5    red  \n",
       "3         9.8        6    red  \n",
       "4         9.4        5    red  \n",
       "...       ...      ...    ...  \n",
       "6492     11.2        6  white  \n",
       "6493      9.6        5  white  \n",
       "6494      9.4        6  white  \n",
       "6495     12.8        7  white  \n",
       "6496     11.8        6  white  \n",
       "\n",
       "[6497 rows x 13 columns]"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "file_path = \"../Downloads/beginner datasets 2/wine.csv\"\n",
    "df = pd.read_csv(file_path)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "a45a8242-a116-4318-8d77-3379a845c112",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar',\n",
       "       'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density',\n",
       "       'pH', 'sulphates', 'alcohol', 'quality', 'type'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "aef2b0a7-478d-45a8-923b-9dc15156949b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "la concentrazione di alcohol per qualità è: quality\n",
      "3    10.215000\n",
      "4    10.180093\n",
      "5     9.837783\n",
      "6    10.587553\n",
      "7    11.386006\n",
      "8    11.678756\n",
      "9    12.180000\n",
      "Name: alcohol, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "CA_per_quality = df.groupby(\"quality\")[\"alcohol\"].mean()\n",
    "print(\"la concentrazione di alcohol per qualità è:\", CA_per_quality)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "b4617ab1-397d-4816-a883-e675516c0c49",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "la concentrazione di alcohol per qualità è: type\n",
      "red      10.422983\n",
      "white    10.514267\n",
      "Name: alcohol, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "CA_per_tipo = df.groupby(\"type\")[\"alcohol\"].mean()\n",
    "print(\"la concentrazione di alcohol per qualità è:\", CA_per_tipo)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "5ac33a91-c792-47af-a812-427f1ab4b25c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "la concentrazione di pH per tipo & qualità è: type   quality\n",
      "red    3          3.398000\n",
      "       4          3.381509\n",
      "       5          3.304949\n",
      "       6          3.318072\n",
      "       7          3.290754\n",
      "       8          3.267222\n",
      "white  3          3.187500\n",
      "       4          3.182883\n",
      "       5          3.168833\n",
      "       6          3.188599\n",
      "       7          3.213898\n",
      "       8          3.218686\n",
      "       9          3.308000\n",
      "Name: pH, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "pH_per_tipo_e_qualità = df.groupby([\"type\" ,\"quality\"]) [\"pH\"].mean()\n",
    "print(\"la concentrazione di pH per tipo & qualità è:\", pH_per_tipo_e_qualità)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "9b7dc639-f81e-4e42-91ff-f3f0312604f3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "la concentrazione di sulphati per tipo & qualità è: type   quality\n",
      "red    3          0.570000\n",
      "       4          0.596415\n",
      "       5          0.620969\n",
      "       6          0.675329\n",
      "       7          0.741256\n",
      "       8          0.767778\n",
      "white  3          0.474500\n",
      "       4          0.476135\n",
      "       5          0.482203\n",
      "       6          0.491106\n",
      "       7          0.503102\n",
      "       8          0.486229\n",
      "       9          0.466000\n",
      "Name: sulphates, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "s_per_tipo_e_qualità = df.groupby([\"type\" ,\"quality\"]) [\"sulphates\"].mean()\n",
    "print(\"la concentrazione di sulphati per tipo & qualità è:\", s_per_tipo_e_qualità)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "079c4205-9cc0-4b15-8cae-167e9dfe7105",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "26908b35-e136-4ab4-86a8-23b92f186a64",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>crim</th>\n",
       "      <th>zn</th>\n",
       "      <th>indus</th>\n",
       "      <th>chas</th>\n",
       "      <th>nox</th>\n",
       "      <th>rm</th>\n",
       "      <th>age</th>\n",
       "      <th>dis</th>\n",
       "      <th>rad</th>\n",
       "      <th>tax</th>\n",
       "      <th>ptratio</th>\n",
       "      <th>black</th>\n",
       "      <th>lstat</th>\n",
       "      <th>medv</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.00632</td>\n",
       "      <td>18.0</td>\n",
       "      <td>2.31</td>\n",
       "      <td>0</td>\n",
       "      <td>0.538</td>\n",
       "      <td>6.575</td>\n",
       "      <td>65.2</td>\n",
       "      <td>4.0900</td>\n",
       "      <td>1</td>\n",
       "      <td>296</td>\n",
       "      <td>15.3</td>\n",
       "      <td>396.90</td>\n",
       "      <td>4.98</td>\n",
       "      <td>24.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.02731</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0</td>\n",
       "      <td>0.469</td>\n",
       "      <td>6.421</td>\n",
       "      <td>78.9</td>\n",
       "      <td>4.9671</td>\n",
       "      <td>2</td>\n",
       "      <td>242</td>\n",
       "      <td>17.8</td>\n",
       "      <td>396.90</td>\n",
       "      <td>9.14</td>\n",
       "      <td>21.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.02729</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0</td>\n",
       "      <td>0.469</td>\n",
       "      <td>7.185</td>\n",
       "      <td>61.1</td>\n",
       "      <td>4.9671</td>\n",
       "      <td>2</td>\n",
       "      <td>242</td>\n",
       "      <td>17.8</td>\n",
       "      <td>392.83</td>\n",
       "      <td>4.03</td>\n",
       "      <td>34.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.03237</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0</td>\n",
       "      <td>0.458</td>\n",
       "      <td>6.998</td>\n",
       "      <td>45.8</td>\n",
       "      <td>6.0622</td>\n",
       "      <td>3</td>\n",
       "      <td>222</td>\n",
       "      <td>18.7</td>\n",
       "      <td>394.63</td>\n",
       "      <td>2.94</td>\n",
       "      <td>33.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.06905</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0</td>\n",
       "      <td>0.458</td>\n",
       "      <td>7.147</td>\n",
       "      <td>54.2</td>\n",
       "      <td>6.0622</td>\n",
       "      <td>3</td>\n",
       "      <td>222</td>\n",
       "      <td>18.7</td>\n",
       "      <td>396.90</td>\n",
       "      <td>5.33</td>\n",
       "      <td>36.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>501</th>\n",
       "      <td>0.06263</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.93</td>\n",
       "      <td>0</td>\n",
       "      <td>0.573</td>\n",
       "      <td>6.593</td>\n",
       "      <td>69.1</td>\n",
       "      <td>2.4786</td>\n",
       "      <td>1</td>\n",
       "      <td>273</td>\n",
       "      <td>21.0</td>\n",
       "      <td>391.99</td>\n",
       "      <td>9.67</td>\n",
       "      <td>22.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>502</th>\n",
       "      <td>0.04527</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.93</td>\n",
       "      <td>0</td>\n",
       "      <td>0.573</td>\n",
       "      <td>6.120</td>\n",
       "      <td>76.7</td>\n",
       "      <td>2.2875</td>\n",
       "      <td>1</td>\n",
       "      <td>273</td>\n",
       "      <td>21.0</td>\n",
       "      <td>396.90</td>\n",
       "      <td>9.08</td>\n",
       "      <td>20.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>503</th>\n",
       "      <td>0.06076</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.93</td>\n",
       "      <td>0</td>\n",
       "      <td>0.573</td>\n",
       "      <td>6.976</td>\n",
       "      <td>91.0</td>\n",
       "      <td>2.1675</td>\n",
       "      <td>1</td>\n",
       "      <td>273</td>\n",
       "      <td>21.0</td>\n",
       "      <td>396.90</td>\n",
       "      <td>5.64</td>\n",
       "      <td>23.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>504</th>\n",
       "      <td>0.10959</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.93</td>\n",
       "      <td>0</td>\n",
       "      <td>0.573</td>\n",
       "      <td>6.794</td>\n",
       "      <td>89.3</td>\n",
       "      <td>2.3889</td>\n",
       "      <td>1</td>\n",
       "      <td>273</td>\n",
       "      <td>21.0</td>\n",
       "      <td>393.45</td>\n",
       "      <td>6.48</td>\n",
       "      <td>22.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>505</th>\n",
       "      <td>0.04741</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.93</td>\n",
       "      <td>0</td>\n",
       "      <td>0.573</td>\n",
       "      <td>6.030</td>\n",
       "      <td>80.8</td>\n",
       "      <td>2.5050</td>\n",
       "      <td>1</td>\n",
       "      <td>273</td>\n",
       "      <td>21.0</td>\n",
       "      <td>396.90</td>\n",
       "      <td>7.88</td>\n",
       "      <td>11.9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>506 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        crim    zn  indus  chas    nox     rm   age     dis  rad  tax  \\\n",
       "0    0.00632  18.0   2.31     0  0.538  6.575  65.2  4.0900    1  296   \n",
       "1    0.02731   0.0   7.07     0  0.469  6.421  78.9  4.9671    2  242   \n",
       "2    0.02729   0.0   7.07     0  0.469  7.185  61.1  4.9671    2  242   \n",
       "3    0.03237   0.0   2.18     0  0.458  6.998  45.8  6.0622    3  222   \n",
       "4    0.06905   0.0   2.18     0  0.458  7.147  54.2  6.0622    3  222   \n",
       "..       ...   ...    ...   ...    ...    ...   ...     ...  ...  ...   \n",
       "501  0.06263   0.0  11.93     0  0.573  6.593  69.1  2.4786    1  273   \n",
       "502  0.04527   0.0  11.93     0  0.573  6.120  76.7  2.2875    1  273   \n",
       "503  0.06076   0.0  11.93     0  0.573  6.976  91.0  2.1675    1  273   \n",
       "504  0.10959   0.0  11.93     0  0.573  6.794  89.3  2.3889    1  273   \n",
       "505  0.04741   0.0  11.93     0  0.573  6.030  80.8  2.5050    1  273   \n",
       "\n",
       "     ptratio   black  lstat  medv  \n",
       "0       15.3  396.90   4.98  24.0  \n",
       "1       17.8  396.90   9.14  21.6  \n",
       "2       17.8  392.83   4.03  34.7  \n",
       "3       18.7  394.63   2.94  33.4  \n",
       "4       18.7  396.90   5.33  36.2  \n",
       "..       ...     ...    ...   ...  \n",
       "501     21.0  391.99   9.67  22.4  \n",
       "502     21.0  396.90   9.08  20.6  \n",
       "503     21.0  396.90   5.64  23.9  \n",
       "504     21.0  393.45   6.48  22.0  \n",
       "505     21.0  396.90   7.88  11.9  \n",
       "\n",
       "[506 rows x 14 columns]"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "file_path = \"../Downloads/beginner datasets 1/boston.csv\"\n",
    "df = pd.read_csv(file_path)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "93cee358-8b49-4966-a95d-8e36bb206f2b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['crim', 'zn', 'indus', 'chas', 'nox', 'rm', 'age', 'dis', 'rad', 'tax',\n",
       "       'ptratio', 'black', 'lstat', 'medv'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e5ba92bc-1898-460f-80f3-547c18fb1c71",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "765f7426-18ba-4cf8-a11a-bc4634a52c27",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      0.538\n",
       "1      0.469\n",
       "2      0.469\n",
       "3      0.458\n",
       "4      0.458\n",
       "       ...  \n",
       "501    0.573\n",
       "502    0.573\n",
       "503    0.573\n",
       "504    0.573\n",
       "505    0.573\n",
       "Name: nox, Length: 506, dtype: float64"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.nox"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "35f7a5c7-f5ec-4cf2-81bb-cea1768e7cd8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6.284634387351779"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "media_stanza = df[\"rm\"].mean()\n",
    "media_stanza"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "3758862d-b6e8-4704-9c4d-ed1a407e8705",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      False\n",
       "1      False\n",
       "2      False\n",
       "3      False\n",
       "4      False\n",
       "       ...  \n",
       "501    False\n",
       "502    False\n",
       "503    False\n",
       "504    False\n",
       "505    False\n",
       "Name: age, Length: 506, dtype: bool"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "anno_ab = df [\"age\"] > 1940\n",
    "anno_ab"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "e521a726-90f1-44ca-84b5-1b102c0e6b88",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'>' not supported between instances of 'list' and 'int'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[116], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m distanze_ponderate \u001b[38;5;241m=\u001b[39m [\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdis\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m5\u001b[39m\n\u001b[0;32m      2\u001b[0m distanze_ponderate\n",
      "\u001b[1;31mTypeError\u001b[0m: '>' not supported between instances of 'list' and 'int'"
     ]
    }
   ],
   "source": [
    "distanze_ponderate = [\"dis\"] > 5\n",
    "distanze_ponderate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "d92df4aa-8a0b-4ea4-8154-288dbc8597d9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      1\n",
       "1      2\n",
       "2      2\n",
       "3      3\n",
       "4      3\n",
       "      ..\n",
       "501    1\n",
       "502    1\n",
       "503    1\n",
       "504    1\n",
       "505    1\n",
       "Name: rad, Length: 506, dtype: int64"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.rad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "833e376f-8d09-4944-a076-4777d6362719",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Numero di valori con aliquota dell'imposta fondiarai sul valore pieno per 10000 dollari: 0\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "'numpy.int64' object is not callable",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[118], line 4\u001b[0m\n\u001b[0;32m      2\u001b[0m count \u001b[38;5;241m=\u001b[39m TAX\u001b[38;5;241m.\u001b[39msum()\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNumero di valori con aliquota dell\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mimposta fondiarai sul valore pieno per 10000 dollari:\u001b[39m\u001b[38;5;124m\"\u001b[39m , count)\n\u001b[1;32m----> 4\u001b[0m count(TAX)\n",
      "\u001b[1;31mTypeError\u001b[0m: 'numpy.int64' object is not callable"
     ]
    }
   ],
   "source": [
    "TAX = df[\"tax\"] == 10000\n",
    "count = TAX.sum()\n",
    "print(\"Numero di valori con aliquota dell'imposta fondiarai sul valore pieno per 10000 dollari:\" , count)\n",
    "count(TAX)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "bbf51e9f-694d-4f8d-a80c-8a252785cd2b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      15.3\n",
       "1      17.8\n",
       "2      17.8\n",
       "3      18.7\n",
       "4      18.7\n",
       "       ... \n",
       "501    21.0\n",
       "502    21.0\n",
       "503    21.0\n",
       "504    21.0\n",
       "505    21.0\n",
       "Name: ptratio, Length: 506, dtype: float64"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.ptratio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "39ee35ee-8f4b-46fd-bba8-537a480230c9",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "unsupported operand type(s) for *: 'method' and 'int'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[130], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m Prezzo_medio \u001b[38;5;241m=\u001b[39m df\u001b[38;5;241m.\u001b[39mgroupby(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mchas\u001b[39m\u001b[38;5;124m\"\u001b[39m)[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmedv\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39mmean\n\u001b[1;32m----> 2\u001b[0m Prezzo_1000 \u001b[38;5;241m=\u001b[39m Prezzo_medio\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m1000\u001b[39m\n\u001b[0;32m      3\u001b[0m Prezzo_1000\u001b[38;5;241m.\u001b[39mround()\u001b[38;5;241m.\u001b[39mastype(\u001b[38;5;28mint\u001b[39m)\n",
      "\u001b[1;31mTypeError\u001b[0m: unsupported operand type(s) for *: 'method' and 'int'"
     ]
    }
   ],
   "source": [
    "Prezzo_medio = df.groupby(\"chas\")[\"medv\"].mean\n",
    "Prezzo_1000 = Prezzo_medio*1000\n",
    "Prezzo_1000.round().astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "ce1c3f5b-b088-4450-93b5-dc1e61f50658",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "crim\n",
       "0.00632     24.0\n",
       "0.00906     32.2\n",
       "0.01096     22.0\n",
       "0.01301     32.7\n",
       "0.01311     35.4\n",
       "            ... \n",
       "45.74610     7.0\n",
       "51.13580    15.0\n",
       "67.92080     5.0\n",
       "73.53410     8.8\n",
       "88.97620    10.4\n",
       "Name: medv, Length: 504, dtype: float64"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CRIM = df.groupby(\"crim\")[\"medv\"].mean()\n",
    "CRIM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "a2db8372-8f97-4449-a374-5fd64517e7ce",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Matplotlib is building the font cache; this may take a moment.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='crim', ylabel='medv'>"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.loc[:,[\"crim\", \"medv\"]].plot.scatter (x=\"crim\", y=\"medv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "02336954-85ed-4327-8b46-1251555f1630",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ptratio  medv\n",
       "12.6     30.3    7.107\n",
       "         33.3    7.287\n",
       "         34.6    7.274\n",
       "13.0     22.8    5.560\n",
       "         30.1    6.842\n",
       "                 ...  \n",
       "21.2     19.2    6.458\n",
       "         19.6    6.326\n",
       "         23.0    6.372\n",
       "22.0     18.2    5.663\n",
       "         20.6    5.936\n",
       "Name: rm, Length: 440, dtype: float64"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "media_istanza_per_alunni_insegnanti = df.groupby([\"ptratio\",\"medv\"])[\"rm\"].mean()\n",
    "media_istanza_per_alunni_insegnanti"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "e15d79bb-ecdf-40ff-ac8a-663688ce04c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='ptratio', ylabel='medv'>"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.loc[:,[\"ptratio\",\"medv\"]].plot.scatter (x=\"ptratio\", y=\"medv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "3a636699-da91-4397-9515-49e12bd1fdef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: ylabel='Frequency'>"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.loc[:,[\"ptratio\",\"medv\"]].plot.hist (x=\"ptratio\", y=\"medv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "a833e3cf-17e1-4c24-9931-bb5e200beffe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rad  rm     tax\n",
      "1    5.706  304    28.4\n",
      "     5.876  315    19.1\n",
      "     6.030  273    80.8\n",
      "     6.031  304    23.3\n",
      "     6.108  315    32.0\n",
      "                   ... \n",
      "24   7.016  666    97.5\n",
      "     7.061  666    77.0\n",
      "     7.313  666    97.9\n",
      "     7.393  666    99.3\n",
      "     8.780  666    82.9\n",
      "Name: age, Length: 495, dtype: float64 age\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "rad  rm     tax\n",
       "1    5.706  304    28\n",
       "     5.876  315    19\n",
       "     6.030  273    81\n",
       "     6.031  304    23\n",
       "     6.108  315    32\n",
       "                   ..\n",
       "24   7.016  666    98\n",
       "     7.061  666    77\n",
       "     7.313  666    98\n",
       "     7.393  666    99\n",
       "     8.780  666    83\n",
       "Name: age, Length: 495, dtype: int32"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "media_età_abitazione = df.groupby([\"rad\", \"rm\", \"tax\"])[\"age\"].mean()\n",
    "print(media_età_abitazione, \"age\")\n",
    "media_età_abitazione.round().astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "4166bca9-d1f4-4cb1-8614-ecfc3d34c434",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: ylabel='Frequency'>"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.loc[:,[\"rad\",\"age\"]].plot.hist (x=\"rad\", y=\"age\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "48b26d15-0edf-42f8-98bc-8cc6fb150711",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      crim    zn  indus  chas    nox     rm   age     dis  rad  tax  ptratio  \\\n",
      "0  0.00632  18.0   2.31     0  0.538  6.575  65.2  4.0900    1  296     15.3   \n",
      "1  0.02731   0.0   7.07     0  0.469  6.421  78.9  4.9671    2  242     17.8   \n",
      "2  0.02729   0.0   7.07     0  0.469  7.185  61.1  4.9671    2  242     17.8   \n",
      "3  0.03237   0.0   2.18     0  0.458  6.998  45.8  6.0622    3  222     18.7   \n",
      "4  0.06905   0.0   2.18     0  0.458  7.147  54.2  6.0622    3  222     18.7   \n",
      "\n",
      "    black  lstat  medv  \n",
      "0  396.90   4.98  24.0  \n",
      "1  396.90   9.14  21.6  \n",
      "2  392.83   4.03  34.7  \n",
      "3  394.63   2.94  33.4  \n",
      "4  396.90   5.33  36.2  \n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "file_path = \"../Downloads/beginner datasets 1/boston.csv\"\n",
    "df = pd.read_csv(file_path)\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "6c7960f5-3cbd-475b-bf31-0e9dc5fc9707",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "               rm   ptratio      medv\n",
      "rm       1.000000 -0.355501  0.695360\n",
      "ptratio -0.355501  1.000000 -0.507787\n",
      "medv     0.695360 -0.507787  1.000000\n"
     ]
    }
   ],
   "source": [
    "correlazioni = df[[\"rm\", \"ptratio\",\"medv\"]].corr()\n",
    "print(correlazioni)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e76e4760-1c4c-4a47-816c-54e20c110712",
   "metadata": {},
   "outputs": [],
   "source": [
    "1.correlazione tra il numero di stanze e il rapporto alunni-insegnante"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "96982ba1-a73c-45f3-ba64-53393118eea0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (10,6))\n",
    "plt.scatter (df[\"rm\"], df[\"ptratio\"])\n",
    "plt.title(\"correlazione tra numero di stanze e rapporto alunni-insegnanti\")\n",
    "plt.xlabel(\"Numero di stanze (RM)\")\n",
    "plt.ylabel(\"Rapporto alunni-insegnanti(PTRATIO)\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1510517e-9ea7-4a8f-b4ac-c96e4b9be82b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "fbd59e7a-8507-44f0-b60d-397f851de43f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "195e616e-11f9-4e20-882c-92f6e4137ea8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Creazione di DataFrame\n",
    "employees_df = pd.DataFrame({ \n",
    "    'employee_id': [101, 102, 103, 104, 105],\n",
    "    'name': ['Alice', 'Bob', 'Charlie', 'David', 'Emma'], \n",
    "    'department_id': [1, 2, 1, 2, 3]\n",
    "})\n",
    "\n",
    "departments_df = pd.DataFrame({ \n",
    "    'department_id': [1, 2, 3], \n",
    "    'department_name': ['HR', 'IT', 'Finance'], \n",
    "    'location': ['New York', 'San Francisco', 'Chicago'] \n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "28429dfe-5536-418e-8e00-1d579d9c03be",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>employee_id</th>\n",
       "      <th>name</th>\n",
       "      <th>department_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>101</td>\n",
       "      <td>Alice</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>102</td>\n",
       "      <td>Bob</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>103</td>\n",
       "      <td>Charlie</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>104</td>\n",
       "      <td>David</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>105</td>\n",
       "      <td>Emma</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   employee_id     name  department_id\n",
       "0          101    Alice              1\n",
       "1          102      Bob              2\n",
       "2          103  Charlie              1\n",
       "3          104    David              2\n",
       "4          105     Emma              3"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "employees_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "2b250bc8-f4b7-4542-868a-c48518da1558",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>department_id</th>\n",
       "      <th>department_name</th>\n",
       "      <th>location</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>HR</td>\n",
       "      <td>New York</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>IT</td>\n",
       "      <td>San Francisco</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Finance</td>\n",
       "      <td>Chicago</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   department_id department_name       location\n",
       "0              1              HR       New York\n",
       "1              2              IT  San Francisco\n",
       "2              3         Finance        Chicago"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "departments_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d19cd961-3e9d-4911-ad1a-f8fb5692cd41",
   "metadata": {},
   "outputs": [],
   "source": [
    "emplyees_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "45ce3985-d081-4150-94cb-fbae12c5c871",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>employee_id</th>\n",
       "      <th>name</th>\n",
       "      <th>department_id</th>\n",
       "      <th>department_name</th>\n",
       "      <th>location</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>101</td>\n",
       "      <td>Alice</td>\n",
       "      <td>1</td>\n",
       "      <td>HR</td>\n",
       "      <td>New York</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>103</td>\n",
       "      <td>Charlie</td>\n",
       "      <td>1</td>\n",
       "      <td>HR</td>\n",
       "      <td>New York</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>102</td>\n",
       "      <td>Bob</td>\n",
       "      <td>2</td>\n",
       "      <td>IT</td>\n",
       "      <td>San Francisco</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>104</td>\n",
       "      <td>David</td>\n",
       "      <td>2</td>\n",
       "      <td>IT</td>\n",
       "      <td>San Francisco</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>105</td>\n",
       "      <td>Emma</td>\n",
       "      <td>3</td>\n",
       "      <td>Finance</td>\n",
       "      <td>Chicago</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   employee_id     name  department_id department_name       location\n",
       "0          101    Alice              1              HR       New York\n",
       "1          103  Charlie              1              HR       New York\n",
       "2          102      Bob              2              IT  San Francisco\n",
       "3          104    David              2              IT  San Francisco\n",
       "4          105     Emma              3         Finance        Chicago"
      ]
     },
     "execution_count": 157,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Unione dei DataFrame usando merge()\n",
    "merge_df = employees_df.merge(departments_df, on= \"department_id\")\n",
    "merge_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f508dee-eece-4867-840d-33c2b8281d88",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Transformazione di dipartiment_id in indice per entrambi i dataframe\n",
    "employees_df.set_index(\"department_id\", inplace=True)\n",
    "departments_df.set_index(\"department_id\", inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "afa3e1fb-211e-400e-a343-e9c0e3245678",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>employee_id</th>\n",
       "      <th>name</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>department_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>101</td>\n",
       "      <td>Alice</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>102</td>\n",
       "      <td>Bob</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>103</td>\n",
       "      <td>Charlie</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>104</td>\n",
       "      <td>David</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>105</td>\n",
       "      <td>Emma</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               employee_id     name\n",
       "department_id                      \n",
       "1                      101    Alice\n",
       "2                      102      Bob\n",
       "1                      103  Charlie\n",
       "2                      104    David\n",
       "3                      105     Emma"
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "employees_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "id": "c8dc39e2-8c70-465a-8f82-819fe9c0c3bf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>department_id</th>\n",
       "      <th>department_name</th>\n",
       "      <th>location</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>HR</td>\n",
       "      <td>New York</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>IT</td>\n",
       "      <td>San Francisco</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Finance</td>\n",
       "      <td>Chicago</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   department_id department_name       location\n",
       "0              1              HR       New York\n",
       "1              2              IT  San Francisco\n",
       "2              3         Finance        Chicago"
      ]
     },
     "execution_count": 167,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "departments_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "a3950c56-df40-4578-9f6f-6e3c00b26761",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>employee_id</th>\n",
       "      <th>name</th>\n",
       "      <th>department_id</th>\n",
       "      <th>department_name</th>\n",
       "      <th>location</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>department_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>101</td>\n",
       "      <td>Alice</td>\n",
       "      <td>2.0</td>\n",
       "      <td>IT</td>\n",
       "      <td>San Francisco</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>103</td>\n",
       "      <td>Charlie</td>\n",
       "      <td>2.0</td>\n",
       "      <td>IT</td>\n",
       "      <td>San Francisco</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>102</td>\n",
       "      <td>Bob</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Finance</td>\n",
       "      <td>Chicago</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>104</td>\n",
       "      <td>David</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Finance</td>\n",
       "      <td>Chicago</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>105</td>\n",
       "      <td>Emma</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               employee_id     name  department_id department_name  \\\n",
       "department_id                                                        \n",
       "1                      101    Alice            2.0              IT   \n",
       "1                      103  Charlie            2.0              IT   \n",
       "2                      102      Bob            3.0         Finance   \n",
       "2                      104    David            3.0         Finance   \n",
       "3                      105     Emma            NaN             NaN   \n",
       "\n",
       "                    location  \n",
       "department_id                 \n",
       "1              San Francisco  \n",
       "1              San Francisco  \n",
       "2                    Chicago  \n",
       "2                    Chicago  \n",
       "3                        NaN  "
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Unique dei DataFrame trasformati usando join()\n",
    "joined_df = employees_df.join(departments_df)\n",
    "joined_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "id": "2b239607-817d-4a4d-a517-af8039af48c0",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'sqlachemy'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[173], line 3\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mdotenv\u001b[39;00m\n\u001b[0;32m      2\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mos\u001b[39;00m\n\u001b[1;32m----> 3\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01msqlachemy\u001b[39;00m\n\u001b[0;32m      4\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01msqlaclchemy\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m create_engine\n\u001b[0;32m      5\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mpandas\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mpd\u001b[39;00m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'sqlachemy'"
     ]
    }
   ],
   "source": [
    "import dotenv\n",
    "import os\n",
    "from sqlaclchemy import create_engine\n",
    "import pandas as pd\n",
    "\n",
    "dotenv.load_dotenv(override=True)\n",
    "\n",
    "username=os.gotenv(\"username\")\n",
    "password=os.gotenv(\"password\")\n",
    "host=os.getenv(\"host\")\n",
    "dbname=os.gotenv(\"dbname\")\n",
    "\n",
    "conn_string = f\"mysql+pymysql://{username}:{password}@{host}/{dbname}\"\n",
    "db_engine = create_engine(conn_string)\n",
    "\n",
    "show_tables = pd.read_sql(\"show Tables\",db_engine)\n",
    "\n",
    "df_employee = pd.read_sql(\"SELECT * FROM dimemployee\",db_engine)\n",
    "df_employee_sales_territory = pd.read_sql(\"SELECT * FROM dimemployeesalesterritory\", db_engine)\n",
    "df_sales_territory = pd.read_sql(\"SELECT * FROM dimemployee\", db_engine)\n",
    "db_engine.dispose()\n",
    "show_tables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ee96db56-59d0-4b08-a4de-6c6bdfca5799",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
